name: Packer CI

on:
  pull_request_target:
    types:
      - closed

jobs:
  call-workflow:
    uses: JaswanthMarri/webapp/.github/workflows/test.yml@main
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn package -DskipTests --file ./webapp/pom.xml
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: webapp-artifact
          path: ./webapp/target/*.jar

  packer:
    name: packer
    needs: [call-workflow, build]
    if: github.event.pull_request.merged == true && success()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Download JAR artifact
        uses: actions/download-artifact@v2
        with:
          name: webapp-artifact
          path: ./webapp-artifact
          
      - name: Install Packer
        run: |
          sudo apt-get update && sudo apt-get install -y packer
      
      - name: List directory contents
        run: ls -R

      - name:  Packer INIT
        run: packer init ./packer/pck-img.json.pkr.hcl
        
      - name: Format Packer template
        run: packer fmt ./packer/pck-img.json.pkr.hcl

      - name: Validate Packer template
        run: packer validate ./packer/pck-img.json.pkr.hcl

      - name: Set up service account key
        run: cat <<< "$CREDS" > gcp-sa-key.json
        env:
          CREDS: ${{ secrets.GCP_KEY_ORG }}

      - name: Run Packer build
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ./gcp-sa-key.json
        run: |
          packer build -force ./packer/pck-img.json.pkr.hcl

  gcp_cli:
    runs-on: ubuntu-latest
    steps:
      - name: 'auth'
        uses: 'google-github-actions/auth@v2'
        env: # 
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
      - name: 'Use gcloud CLI'
        run: 'gcloud info'
      - name: 'get secret username'
        run: |
          username_secret_value=$(gcloud secrets versions access latest --secret="sql-username")
          echo "::set-output name=username_secret_value::$username_secret_value"
      - name: 'get secret password'
        run: |
          password_secret_value=$(gcloud secrets versions access latest --secret="sql-password")
          echo "::set-output name=password_secret_value::$password_secret_value"
      - name: 'get secret ip'
        run: |
          ip_secret_value=$(gcloud secrets versions access latest --secret="sql-db-ip")
          echo "::set-output name=ip_secret_value::$ip_secret_value"
      - name: 'get secret db-name'
        run: |
          db_secret_value=$(gcloud secrets versions access latest --secret="sql-db-ip")
          echo "::set-output name=db_secret_value::$db_secret_value"
      - name: 'get secret vm sa'
        run: |
          vm_sa_secret_value=$(gcloud secrets versions access latest --secret="vm-sa")
          echo "::set-output name=vm_sa_secret_value::$vm_sa_secret_value"
      - name: 'get secret vm kms'
        run: |
          vm_kms_secret_value=$(gcloud secrets versions access latest --secret="vm-kms")
          echo "::set-output name=vm_kms_secret_value::$vm_kms_secret_value"
      - name: 'get secret vpc name'
        run: |
          vpc_name_secret_value=$(gcloud secrets versions access latest --secret="vpc-name")
          echo "::set-output name=vpc_name_secret_value::$vpc_name_secret_value"
      - name: 'get secret vpc subnet'
        run: |
          vpc_subnet_name_secret_value=$(gcloud secrets versions access latest --secret="vpc-subnet-name")
          echo "::set-output name=vpc_subnet_name_secret_value::$vpc_subnet_name_secret_value"
