name: Packer CI

on:
  pull_request_target:
    types:
      - closed

jobs:
  call-workflow:
    uses: JaswanthMarri/webapp/.github/workflows/test.yml@main
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn package -DskipTests --file ./webapp/pom.xml
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: webapp-artifact
          path: ./webapp/target/*.jar

  packer:
    name: packer
    needs: [call-workflow, build]
    if: github.event.pull_request.merged == true && success()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Download JAR artifact
        uses: actions/download-artifact@v2
        with:
          name: webapp-artifact
          path: ./webapp-artifact
          
      - name: Install Packer
        run: |
          sudo apt-get update && sudo apt-get install -y packer
      
      - name: List directory contents
        run: ls -R

      - name:  Packer INIT
        run: packer init ./packer/pck-img.json.pkr.hcl
        
      - name: Format Packer template
        run: packer fmt ./packer/pck-img.json.pkr.hcl

      - name: Validate Packer template
        run: packer validate ./packer/pck-img.json.pkr.hcl

      - name: Set up service account key
        run: cat <<< "$CREDS" > gcp-sa-key.json
        env:
          CREDS: ${{ secrets.GCP_KEY_ORG }}

      - name: Run Packer build
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ./gcp-sa-key.json
        run: |
          packer build -force ./packer/pck-img.json.pkr.hcl

  gcp_cli:
    runs-on: ubuntu-latest
    steps:
      - name: 'auth'
        uses: 'google-github-actions/auth@v2'
        env: # 
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
      - name: 'Use gcloud CLI'
        run: 'gcloud info'
      - name: 'get secret username'
        id: username
        run: |
          username_secret_value=$(gcloud secrets versions access latest --secret="sql-username")
          echo "::set-output name=username_secret_value::$username_secret_value"
      - name: 'get secret password'
        id: password
        run: |
          password_secret_value=$(gcloud secrets versions access latest --secret="sql-password")
          echo "::set-output name=password_secret_value::$password_secret_value"
      - name: 'get secret ip'
        id: ip
        run: |
          ip_secret_value=$(gcloud secrets versions access latest --secret="sql-db-ip")
          echo "::set-output name=ip_secret_value::$ip_secret_value"
      - name: 'get secret db-name'
        id: db_name
        run: |
          db_secret_value=$(gcloud secrets versions access latest --secret="sql-db-ip")
          echo "::set-output name=db_secret_value::$db_secret_value"
      - name: 'get secret vm sa'
        id: sa
        run: |
          vm_sa_secret_value=$(gcloud secrets versions access latest --secret="vm-sa")
          echo "::set-output name=vm_sa_secret_value::$vm_sa_secret_value"
      - name: 'get secret vm kms'
        id: kms
        run: |
          vm_kms_secret_value=$(gcloud secrets versions access latest --secret="vm-kms")
          echo "::set-output name=vm_kms_secret_value::$vm_kms_secret_value"
      - name: 'get secret vpc name'
        id: vpc
        run: |
          vpc_name_secret_value=$(gcloud secrets versions access latest --secret="vpc-name")
          echo "Retrieved VPC name secret: $vpc_name_secret_value"
          echo "::set-output name=vpc_name_secret_value::$vpc_name_secret_value"
      - name: 'get secret vpc subnet'
        id: subnet
        run: |
          vpc_subnet_name_secret_value=$(gcloud secrets versions access latest --secret="vpc-subnet-name")
          echo "Retrieved VPC subnet name secret: $vpc_subnet_name_secret_value"
          echo "::set-output name=vpc_subnet_name_secret_value::$vpc_subnet_name_secret_value"
      - name: Use Secret Value
        run: |
          echo "The secret value is ${{ steps.subnet.outputs.vpc_subnet_name_secret_value }}  ${{ steps.vpc.outputs.vpc_name_secret_value }}"
      - name: Get current date and time in custom format
        id: dt_name
        run: |
          name_dt=$(date +"%Y-%m-%d-%H-%M")
          echo "The current date and time is $name_dt"
          echo "::set-output name=name_dt::$name_dt"
      - name: 'Create Instance Template'
        run: |
          gcloud compute instance-templates create webapp-${{ steps.dt_name.outputs.name_dt }} \
            --boot-disk-device-name=vpc-instance-cloud-webapp \
            --boot-disk-size="100GB" \
            --boot-disk-type=pd-balanced \
            --boot-disk-kms-key=${{ steps.kms.outputs.vm_kms_secret_value }} \
            --image="projects/cloud-nw-dev/global/images/custom-image-with-db" \
            --instance-template-region="us-east1" \
            --can-ip-forward \
            --machine-type="e2-standard-2" \
            --network-interface=network-tier=PREMIUM,stack-type="IPV4_ONLY",network=${{ steps.vpc.outputs.vpc_name_secret_value }},subnet=${{ steps.subnet.outputs.vpc_subnet_name_secret_value }} \
            --maintenance-policy=MIGRATE \
            --provisioning-model=STANDARD \
            --shielded-integrity-monitoring \
            --shielded-vtpm \
            --tags="http-server","https-server","db-access","load-balanced-backend" \
            --metadata=startup-script='#!/bin/bash
          set -e
          application_properties="/opt/application.properties"
          if [ ! -f "$application_properties" ]; then
            touch "$application_properties"
            echo "spring.datasource.username=${{ steps.username.outputs.username_secret_value }}" >> /opt/application.properties
            echo "spring.datasource.password=${{ steps.password.outputs.password_secret_value }}" >> /opt/application.properties
            echo "spring.datasource.url=jdbc:postgresql://${{ steps.ip.outputs.ip_secret_value }}:5432/${{ steps.db_name.outputs.db_secret_value }}" >> /opt/application.properties
            echo "spring.datasource.driver-class-name=org.postgresql.Driver" >> /opt/application.properties
            echo "server.port=8080" >> /opt/application.properties
            echo "spring.jpa.generate-ddl=true" >> /opt/application.properties
            echo "spring.jpa.hibernate.ddl-auto=update" >> /opt/application.properties
            echo "spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration" >> /opt/application.properties
            echo "spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect" >> /opt/application.properties
            echo "logging.level.org.springframework.security=DEBUG" >> /opt/application.properties
            echo "spring.mvc.throw-exception-if-no-handler-found=true" >> /opt/application.properties
            echo "pubsub.topic=verify_email" >> /opt/application.properties
            echo "gcp.prjt=cloud-nw-dev" >> /opt/application.properties
            echo "spring.datasource.hikari.max-lifetime=12000" >> /opt/application.properties
            echo "spring.datasource.hikari.maximumPoolSize=4" >> /opt/application.properties
          fi
          sudo chown -R csye6225:csye6225 /opt/
          ' \
            --service-account=${{ steps.sa.outputs.vm_sa_secret_value }} \
            --scopes="https://www.googleapis.com/auth/logging.admin","cloud-platform","monitoring-write","logging-write" \
            --region="us-east1"
        
      - name: 'set instance-template for IGM'
        id: IGM
        run: |
          gcloud compute instance-groups managed set-instance-template appserver-igm \
            --template="projects/cloud-nw-dev/regions/us-east1/instanceTemplates/webapp-${{ steps.dt_name.outputs.name_dt }}" \
            --region="us-east1"
